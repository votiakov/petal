stages:
  - test
  - deploy_tags
  - deploy

variables:
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_USER: "postgres"
  DATABASE_URL: "postgres"
  MIX_ENV: "test"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  # fetch & clean the repo rather than completely cloning (faster)
  GIT_STRATEGY: fetch

# Test stage. Runs various tests and speculatively builds docker image in
#   parallel, in case the build passes.
test:
  stage: test
  image: "elixir:1.10.4-alpine"
  cache:
    paths:
      - _build/
      - deps/
  services:
  - name: postgres:12
  script: script/cibuild

build_image_for_commit:
  stage: test
  image: "docker:20.10"
  only:
    - master
  cache:
    paths:
      - _build/
      - deps/
  services:
    - name: docker:20.10-dind
  script:
    - docker login "https://${CI_REGISTRY}" -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # This enables fast parallel builds
    - export DOCKER_BUILDKIT=1
    - mkdir -p _build/prod
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    # Push the commit SHA tagged version to registry. We will later choose to tag that as stable
    #   if everything passes.
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Pull out the built _build/prod directory so we can cache it!
    - CONTAINER_HANDLE=`docker create $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA`
    - docker cp $CONTAINER_HANDLE:/root/app/_build/prod _build
    - docker cp $CONTAINER_HANDLE:/root/app/deps deps

# If tests pass, tag the commit and update package versions
deploy_to_tags:
  stage: deploy_tags
  needs: ['test', 'build_image_for_commit']
  image: "node:15.0"
  only:
    - master
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
  script:
    - export GIT_AUTHOR_NAME=$GITLAB_USER_NAME
    - export GIT_AUTHOR_EMAIL=$GITLAB_USER_EMAIL
    - export GIT_COMMITTER_NAME=$GITLAB_USER_NAME
    - export GIT_COMMITTER_EMAIL=$GITLAB_USER_EMAIL
    - npm install
    - npx semantic-release --repository-url=$CI_REPOSITORY_URL
    - script/generate-build-version
  artifacts:
    reports:
      dotenv: build.env

# If the tests passed, we take the image for this SHA and tag it with the version
#   and latest, so we can signal that it is ready for prod
deploy_commit_image_to_tag:
  stage: deploy
  needs:
    - build_image_for_commit
    - job: deploy_to_tags
      artifacts: true
  only:
    - master
  image: "docker:19.03.12"
  services:
    - name: docker:19.03.12-dind
  variables:
    GIT_STRATEGY: none # this job does not need the project files, only docker
  script:
    - echo "BUILD_VERSION is ${BUILD_VERSION}"
    - docker login "https://${CI_REGISTRY}" -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    # Run the docker pull, but retry if it doesn't work at first because layers may be
    # still be loading to storage
    - for i in 1 2 3 4 5; do docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA && break || sleep 15; done
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$BUILD_VERSION
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$BUILD_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
